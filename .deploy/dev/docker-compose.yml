volumes:
  mysql:

services:
  order-api:
    build:
      context: ../../app/order-api
      dockerfile: ../../.build/order-api/Dockerfile # current context at app/order-api/
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8080/api/${VERSION:-v1.0.0}/health",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s # Give more time for MySQL to become ready
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      VERSION: ${VERSION}
      SALT_ROUNDS: ${SALT_ROUNDS}
      DURATION: ${DURATION}
      REFRESHABLE_DURATION: ${REFRESHABLE_DURATION}
      ACB_API_URL: ${ACB_API_URL}
      ACB_CLIENT_ID: ${ACB_CLIENT_ID}
      ACB_CLIENT_SECRET: ${ACB_CLIENT_SECRET}
      ROBOT_API_URL: ${ROBOT_API_URL}
      TZ: Asia/Ho_Chi_Minh
    depends_on:
      mysql_db:
        condition: service_healthy
    ports:
      - "8080:8080"

  mysql_db:
    build:
      context: ../../.build/order-db
    volumes:
      - mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      TZ: Asia/Ho_Chi_Minh
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 60s # Increase timeout to give MySQL more time
      retries: 5

  order-ui:
    build:
      context: ../../app/order-ui
      dockerfile: ../../.build/order-ui/Dockerfile # Adjusted to be relative to the context
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5173"] # TCP check on port 5173
      interval: 10s # Increase interval between health checks
      timeout: 10s # Increase timeout for slower responses
      retries: 5
    restart: always
    ports:
      - "5173:5173"

networks:
  default:
    external: true
    name: scoobydoo
