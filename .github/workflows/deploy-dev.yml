name: Deploy-dev

on:
  pull_request_target:
    branches: [main]
    types: [opened, closed]
  workflow_run:
    workflows: ["Build and Test"] # Trigger after 'Build and Test' workflow succeeds
    types:
      - completed

jobs:
  deploy:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Copy Environment Configuration
        env:
          ENV_DEV: ${{ secrets.ENV_DEV }}
          GOOGLE_API_CREDENTIALS: ${{ secrets.GOOGLE_API_CREDENTIALS }}
          FE_ENV_DEV: ${{ secrets.FE_ENV_DEV }}
        run: |
          mkdir -p app/order-api/public/json
          echo "$ENV_DEV" > .deploy/dev/.env
          echo "$GOOGLE_API_CREDENTIALS" > app/order-api/public/json/credentials.json
          echo "$FE_ENV_DEV" > app/order-ui/.env

      - name: Deploy with Docker Compose
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_PRIVATE_KEY_DEV: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_DEV" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p $SSH_PORT $REMOTE_HOST >> ~/.ssh/known_hosts
          export DOCKER_HOST="ssh://$REMOTE_USER@$REMOTE_HOST:$SSH_PORT"
          export DOCKER_BUILDKIT=1

          docker ps -a
          docker compose -f .deploy/dev/docker-compose.yml pull
          docker compose -f .deploy/dev/docker-compose.yml down
          docker compose -f .deploy/dev/docker-compose.yml up -d --build
          docker image prune -f  # clean up none image after built
          docker volume prune -f # clean up none volumn after built
